[{"content":"评论功能对一个博客来说是很重要的. 本文介绍如何为基于hugo构建的博客系统(使用了zzo主题)添加评论功能.\nzzo主题集成了多种评论系统, 稍作配置就可以使用. 本文重要介绍两种: utterances和valine. 因为这两种比较有代表性, 其他的都大同小异.\n使用utterances  首先我们所需要的 github 仓库必须是公开的，而不是私有的，这样我们的读者才可以查看以及发表评论 我们必须在 github 上进行安装 utterances,首先我们访问 utterances应用程序 然后点击 Install 按钮进行安装 在这里可以选择可以关联的存储库，可以选择我们所拥有的库或者某一个仓库，这里我们只选择某一个需要进行评论的库，这样比较好 在hugo配置文件config/_default/params.toml中进行相关配置  1 2 3 4 5  [utterances] # https://utteranc.es/owner = \u0026#34;lulu_py\u0026#34; # Your GitHub IDrepo = \u0026#34;lulupy/lulupy.github.io\u0026#34; # The repo to store commentsmessage = \u0026#34;\u0026#34; # Optionallink = \u0026#34;\u0026#34; # Optional  使用valine Valine是一款基于Leancloud的快速、简洁且高效的评论系统.\n 创建LearnCloud应用, 选择开发版.  在 存储 -\u0026gt; 结构化数据 -\u0026gt; 创建Class 创建Comment数据库，用来存储评论数据  在 设置 -\u0026gt; 应用Keys中查看appId和appKey.  在hugo 配置文件config/_default/params.toml中配置valine  其中appId和appKey在第3步中获得.\n1 2 3 4 5 6 7 8 9  [valine]enable = trueappId = \u0026#39;xxx\u0026#39;appKey = \u0026#39;xxx\u0026#39;notify = false # mail notifier , https://github.com/xCss/Valine/wikiverify = false# Verification codeavatar = \u0026#39;mm\u0026#39; placeholder = \u0026#39;说点什么吧...\u0026#39;visitor = false  然后在页面上就可以看到评论区了:\n评论一条数据, 在leancloud上就可以看到这条数据了:\n","description":"","id":0,"section":"posts","tags":null,"title":"为博客添加评论功能","uri":"http://127.0.0.1:8085/zh/posts/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"},{"content":"Hugo是由Go语言实现的静态网站生成器. 类似的工具有很多, 比如hexo、jekyll, 为什么选择hugo? hexo比较容易上手，并且有很稳定、功能齐全的主题(比如Next). hugo目前还不太完善. 但相比于hexo, hugo的优势就是快. 根据相关博主提供的数据，他200篇左右的博文用Hexo 需要10分钟去生成静态网页，而Hugo 只需要10秒. 光这一点, 我就决定使用hugo.\n安装hugo 到 Hugo Releases 下载对应的操作系统版本的Hugo二进制文件\n我以MacOs系统为例.\n最好选择带extended版本的文件.\n1 2 3  tar -zxvf hugo_extended_0.82.1_macOS-64bit.tar.gz # 解压 cd hugo_extended_0.82.1_macOS-64bit mv hugo /usr/local/bin/ # 拷贝可执行文件到/usr/local/bin/   生成站点 1  hugo new site my-blog   站点目录结构:\n1 2 3 4 5 6 7 8 9  . ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── resources ├── static └── themes   创建文章 1 2  cd my-blog hugo new about.md   about.md 自动生成到了 content/about.md ，打开 about.md 看下:\n1 2 3 4 5 6 7  --- date: 2021-04-25T17:23:45+08:00 draft: true title: \u0026#34;about\u0026#34; --- 正文内容   使用皮肤 我选择的皮肤是zzo, 下载zzo到themes文件夹下:\n1 2 3  cd themes git clone https://github.com/zzossig/hugo-theme-zzo.git mv hugo-theme-zzo zzo # 改下名字   你必须保持如下文件结构, 否则程序将跑不起来. 详细内容请查看zzo configuration.\n1 2 3 4 5 6 7  root ├── config │ ├── _default │ │ ├── config.toml │ │ ├── languages.toml │ │ ├── menus.en.toml │ │ ├── params.toml   在config/_default/config.toml文件中设置theme:\n1  theme = \u0026#34;zzo\u0026#34;   运行Hugo 在站点根目录执行 Hugo 命令进行调试:\n1  hugo server -D   浏览器里打开： http://localhost:1313\n-D: \u0026ndash;buildDrafts, 意思是draft: true的文件也会被构建.\n部署到GitHub Pages 首先在GitHub上创建一个名为lulupy.github.io的Repository. 将lulupy替换为你的github用户名.\n生成静态文件:\n1  hugo --baseUrl=\u0026#34;https://lulupy.github.io/\u0026#34;   注意: 以上命令并不会生成草稿页面\n所有静态页面都会生成到 public 目录, 将pubilc目录里所有文件 push 到刚创建的Repository的master分支:\n1 2 3 4 5 6  cd public git init git remote add origin https://github.com/lulupy/lulupy.github.io.git git add -A git commit -m \u0026#34;first commit\u0026#34; git push -u origin master   浏览器里访问：https://lulupy.github.io/\n","description":"","id":1,"section":"posts","tags":null,"title":"使用hugo搭建blog","uri":"http://127.0.0.1:8085/zh/posts/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BAblog/"}]